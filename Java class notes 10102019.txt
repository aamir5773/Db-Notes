package com.godrej.multithreadingdemo;

public class Ex1_ThreadLifeCycleDemo extends Thread {

	
	public void run(){
		
		System.out.println("In side run() Thread is alive? "+this.isAlive());
		
		 int num = 0;
		  
		 	while (num < 4) 
		 	{			
		 		num++;
		 		System.out.println("num = " + num);
			
			try {				
				sleep(500);
				System.out.println("In not runnable stage, Thread is alive? "+this.isAlive());
			
				} catch (InterruptedException exp) 
				{				
				System.err.println("Thread Interrupted ...");
				}
			
		    }
		
	}
	
	
	
}
package com.godrej.multithreadingdemo;

public class Ex1_ThreadLifeCycleMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Thread myThread = new Ex1_ThreadLifeCycleDemo();
		
		System.out.println("Before Runnable stage  Thread is alive? : "+myThread.isAlive());
		
		myThread.start();
		
		System.out.println("main thread is running ");
		
		
		try{
			myThread.sleep(4000);
			
		}
		catch(InterruptedException exp){
			System.err.println("Thread is interrupted !");
		}
		
		//myThread.stop();
		System.out.println("Main Thread getting over Thread is alive ? "+myThread.isAlive());
	}

}

package com.godrej.multithreadingdemo;
class ExtendsThread extends Thread {
	private int counter = 0;

	public void run() {
		counter++;
		System.out.println("ExtendsThread : Counter : " + counter);
	}
}
public class Ex1_ThreadVsRunnable {

	public static void main(String args[]) throws Exception {
		// Creating new instance for every thread access.
		ExtendsThread t1 = new ExtendsThread();		
		t1.start();		
		Thread.sleep(1000); // Waiting for 1 second before starting next thread
		
		ExtendsThread t2 = new ExtendsThread();
		t2.start();
		Thread.sleep(1000); // Waiting for 1 second before starting next thread
		
		ExtendsThread t3 = new ExtendsThread();
		t3.start();
	}
}

/*
In the Runnable interface approach, 
only one instance of a class is being created 
and it has been shared by different threads. 
So the value of counter is incremented for each and every thread access.

Whereas, Thread class approach, 
you must have to create separate instance for every thread access.
 Hence different memory is allocated for every class instances 
 and each has separate counter, the value remains same, 
 which means no increment will happen 
 because none of the object reference is same.*/

package com.godrej.multithreadingdemo;

class ImplementsRunnable implements Runnable {

	private int counter = 0;

	public void run() {
		counter++;
		System.out.println("ImplementsRunnable : Counter : " + counter);
	}
}

public class Ex1_ThreadVsRunnable2 {

	public static void main(String args[]) throws Exception {
		// Multiple threads share the same object.
		ImplementsRunnable rc = new ImplementsRunnable();
		
		Thread t1 = new Thread(rc);		
		t1.start();
		Thread.sleep(1000); // Waiting for 1 second before starting next thread
		
		Thread t2 = new Thread(rc);
		t2.start();
		Thread.sleep(1000); // Waiting for 1 second before starting next thread
		
		Thread t3 = new Thread(rc);
		t3.start();

	}
}

/*
In the Runnable interface approach, 
only one instance of a class is being created 
and it has been shared by different threads. 
So the value of counter is incremented for each and every thread access.

Whereas, Thread class approach, 
you must have to create separate instance for every thread access.
 Hence different memory is allocated for every class instances 
 and each has separate counter, the value remains same, 
 which means no increment will happen 
 because none of the object reference is same.*/



package com.godrej.multithreadingdemo;

class mythread extends Thread
{
	public void run()
	{
		for(int i=1;i<10; i=i+2 )
		{
			System.out.println(i);
			try
			{
			Thread.sleep(50);
			}
			catch(Exception e)
			{
			}
		}
	}
}
class Ex2_MyThrDemoJoin
{
public static void main(String args[]) 
{
mythread t=new mythread();
Thread t1=new Thread(t);


System.out.println("*");

t1.start();
try
{
t1.join();
}
catch(Exception e)
{
}


System.out.println("*");
	
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			
			e.printStackTrace();
		}
		
}
}
package com.godrej.multithreadingdemo;

class clsA extends Thread
{
public void run()
{
	for(int i=1;i<=50;i++)
	{
		System.out.println("threadA : "+i);
	}
	System.out.println("threadA : over");
}
}
class clsB extends Thread
{
public void run()
{
	for(int i=1;i<=50;i++)
	{
		System.out.println("threadB : "+i);
	}
	System.out.println("threadB : over");
}
}

class clsC extends Thread
{
public void run()
{
	for(int i=1;i<=50;i++)
	{
		System.out.println("threadC : "+i);

	}
	System.out.println("threadC : over");
}
}
class ThreadPri
{
	public static void main(String args[])
	{
		clsA a =new clsA();
		clsB b =new clsB();
		clsC c =new clsC();
                
		a.setPriority(Thread.MIN_PRIORITY);// value is 1
		b.setPriority(Thread.MAX_PRIORITY);//value 10
		c.setPriority(Thread.NORM_PRIORITY);//value is 5
		//can use    a.setPriority(7); 
		//           b.setPriority(3); 
		a.start();
		b.start();
		c.start();

	}
}


//Yield method temporarily stop the callers thread and put at the end of queue 
//to wait for another turn to be executed. It is used to make other threads
//of the same priority have the chance to run.



